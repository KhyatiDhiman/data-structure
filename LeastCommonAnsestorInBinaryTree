public class BinaryTreeLCA {
	public static class TreeNode
	{
		int data;
		TreeNode left;
		TreeNode right;
		TreeNode(int data)
		{
			this.data=data;
		}
	}
 
	public static TreeNode lowestCommonAncestor(TreeNode root, TreeNode a, TreeNode b) {
		if(root == null)
			return null;
		if(root.data == a.data || root.data == b.data )
			return root;
 
		TreeNode left=lowestCommonAncestor(root.left,a,b);
		TreeNode right=lowestCommonAncestor(root.right,a,b);
 
		// If we get left and right not null , it is lca for a and b
		if(left!=null && right!=null)
			return root;
		if(left== null)
			return right;
		else
			return left;
 
	}
	public static void main(String[] args)
	{
		// Creating a binary tree
		TreeNode rootNode=createBinaryTree();
		System.out.println("Lowest common ancestor for node 2 and 3:");
		TreeNode node2=new TreeNode(2);
		TreeNode node3=new TreeNode(3);
		System.out.println(lowestCommonAncestor(rootNode,node2,node3).data);
		
		System.out.println("Lowest common ancestor for node 4 and 6:");
		TreeNode node4=new TreeNode(4);
		TreeNode node6=new TreeNode(6);
		System.out.println(lowestCommonAncestor(rootNode,node4,node6).data); 
	}
 
	public static TreeNode createBinaryTree()
	{
 
		TreeNode rootNode =new TreeNode(1);
		
		TreeNode node2=new TreeNode(2);
		TreeNode node4=new TreeNode(4);
		TreeNode node5=new TreeNode(5);
		
		TreeNode node3=new TreeNode(3);
		TreeNode node6=new TreeNode(6);
		TreeNode node7=new TreeNode(7);
		
		rootNode.left=node2;
		rootNode.right=node3;
		
		node2.left=node4;
		node2.right=node5;
		
		node3.left=node6;
		node3.right=node7;
		
		return rootNode;
		
 
		
	}
}
